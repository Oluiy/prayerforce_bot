// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

model User {
  id         Int       @id @default(autoincrement())
  chatId     String    @unique
  firstName  String?   
  lastName   String?
  birthday   DateTime? 
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userQuestions UserQuestion[]
  payments   Payment[]  
  cart       Cart?      // One-to-one relationship with Cart
}

model Question {
  id         Int       @id @default(autoincrement())
  text       String    @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  options    Option[]
  userQuestions UserQuestion[] // Added opposite relation field
}

model Option {
  id           Int       @id @default(autoincrement())
  text         String    
  isCorrect    Boolean   @default(false)
  question     Question  @relation(fields: [questionId], references: [id])
  questionId   Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userQuestions UserQuestion[] // Added opposite relation field
}

model Announcement {
  id          Int       @id @default(autoincrement())
  text        String
  createdAt   DateTime  @default(now())
  updated     DateTime  @updatedAt
}


model UserQuestion {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  question     Question  @relation(fields: [questionId], references: [id])
  questionId   Int
  answeredAt   DateTime  @default(now())
  selectedOption Option? @relation(fields: [optionId], references: [id])
  optionId     Int?       
}

// Add to your schema.prisma file
model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])  // Add this line
  userId    Int      // Change from String to Int
  reference String   @unique
  amount    Float
  status    String   @default("pending") // pending, completed, failed
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[] // One-to-many relationship with CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  name      String   // Name of the item
  price     Float    // Price of the item
  quantity  Int      @default(1) // Quantity of the item
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}